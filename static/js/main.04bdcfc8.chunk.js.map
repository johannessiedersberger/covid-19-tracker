{"version":3,"sources":["logo.svg","components/DropdownComponent.js","components/HeaderComponent.js","components/TabComponent.js","styles/map-style.js","components/CircleComponent.js","components/MapComponent.js","components/StatsComponent.js","components/ListTableComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DropdownList","props","countryOptions","push","key","value","text","countryData","map","country","countryLetters","countryInfo","iso2","toLowerCase","flag","selectionChanged","selectedCountry","selectedCountryChanged","lat","long","Dropdown","placeholder","fluid","search","selection","options","this","onChange","e","Component","Header","className","Tab","setCardValues","colors","Object","values","state","tabRefs","tabCasesRefs","caseNumbers","i","length","html","setCommas","current","innerHTML","allCases","activeCases","recoveredCases","deathsCases","allCasesRef","React","createRef","activeCasesRef","recoveredCasesRef","deathsCasesRef","worldData","cases","active","recovered","deaths","placeEvents","changeSelectedButton","number","toString","replace","addEventListener","caseTypeChanged","buttonElement","forEach","cardElement","style","backgroundColor","ref","mapStyle","CircleComponent","handleToggleOpen","setState","isOpen","handleToggleClose","minCircleSize","maxCircleSize","fillColor","color","strokeColor","fillOpacity","strokeWeight","strokeOpacity","center","countryCenter","radius","Math","min","max","onMouseOver","onMouseOut","position","onCloseClick","backgroundImage","Map","mapstate","data","caseType","lng","circles","googleMap","class","googleMapsApiKey","mapContainerStyle","width","height","boxShadow","borderRadius","zoom","onLoad","setOptions","styles","Stats","myRef","chartdata","buildChartData","historicalDataWorld","buildChart","getCountryHistoricalData","historicalDataCountries","currentCuntry","timeline","id","chartData","date","newDataPoint","x","y","chart","chartRef","ctx","getContext","label","borderColor","destroy","Chart","type","datasets","maintainAspectRatio","tooltips","mode","intersect","elements","point","scales","xAxes","time","format","tooltipFormat","yAxes","ticks","callback","index","numeral","ListTable","showDataInTable","countryTableRef","scope","Main","isLoading","historicalData","mapComponent","statsComponent","loadWorldData","loadCountryData","loadHistoricalDataWorld","loadHistoricalDataCountries","fetch","then","response","json","changeSelectedCaseType","setMapCenter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04bdcfc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport {Dropdown} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';  \r\n\r\n  class DropdownList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    countryOptions = () =>{\r\n        var countryOptions = [];\r\n\r\n        countryOptions.push(\r\n            {\r\n                key: 'worldwide',\r\n                value: 'worldwide',\r\n                text: 'worldwide'\r\n            }\r\n        );\r\n\r\n        this.props.countryData.map(\r\n            (country) => {\r\n\r\n                    var countryLetters = country.countryInfo.iso2;\r\n                    if(countryLetters !== null){\r\n                        countryLetters = countryLetters.toLowerCase();\r\n                    }\r\n\r\n                    countryOptions.push(\r\n                        {\r\n                            key: country.country,\r\n                            value: country.country,\r\n                            flag: countryLetters,\r\n                            text: country.country\r\n                        }\r\n                    )\r\n                }\r\n                   \r\n            \r\n        );\r\n        return countryOptions;\r\n    }\r\n\r\n      selectionChanged = (selectedCountry) => {\r\n          if (selectedCountry === 'worldwide') {\r\n              this.props.selectedCountryChanged({\r\n                  country: 'worldwide',\r\n                  lat: 48.135124,\r\n                  long: 11.581981,\r\n              }\r\n              );\r\n          }\r\n          else {\r\n              this.props.countryData.map((country) => {\r\n                  if (country.country === selectedCountry) {\r\n                      this.props.selectedCountryChanged({\r\n                          country: country.country,\r\n                          lat: country.countryInfo.lat,\r\n                          long: country.countryInfo.long,\r\n                      }\r\n                      );\r\n                  }\r\n              });\r\n          }\r\n        \r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Dropdown\r\n              placeholder='Select Country'\r\n              fluid\r\n              search\r\n              selection\r\n              options={this.countryOptions()}\r\n              onChange={(e, selectedCountry) => {\r\n                  this.selectionChanged(selectedCountry.value);\r\n              }}\r\n            />\r\n          );\r\n    }\r\n  }\r\n  \r\n\r\n  export default DropdownList;","import React, {Component} from 'react';\r\nimport DropdownList from './DropdownComponent';\r\n\r\nclass Header extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row header-container\">\r\n                <div className=\"col title-container\">\r\n                    <h1>Covid-19</h1>\r\n                    <h4>Coronavirus</h4>\r\n                </div>\r\n                <div className=\"col search-container\">\r\n                    <DropdownList countryData={this.props.countryData} selectedCountryChanged={(selectedCountry) => this.props.selectedCountryChanged(selectedCountry) }/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nclass Tab extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            colors: {\r\n                allCases: '#1d2c4d',\r\n                activeCases : '#FF0000',\r\n                recoveredCases: '#25b840',\r\n                deathsCases: '#020d1f'\r\n            },\r\n            tabCasesRefs: {\r\n                allCasesRef : React.createRef(),//cases\r\n                activeCasesRef: React.createRef(),//active\r\n                recoveredCasesRef: React.createRef(),//recovered\r\n                deathsCasesRef: React.createRef()//deaths\r\n            },\r\n            tabRefs: {\r\n                allCasesRef : React.createRef(),//cases\r\n                activeCasesRef: React.createRef(),//active\r\n                recoveredCasesRef: React.createRef(),//recovered\r\n                deathsCasesRef: React.createRef()//deaths\r\n            },\r\n            caseNumbers: {\r\n                allCases: this.props.worldData.cases, \r\n                activeCases: this.props.worldData.active,\r\n                recovered: this.props.worldData.recovered,\r\n                deaths: this.props.worldData.deaths\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setCardValues();\r\n        this.placeEvents();\r\n        this.changeSelectedButton(this.state.tabRefs.allCasesRef);\r\n    }\r\n\r\n    setCardValues = () => {\r\n        var colors = Object.values(this.state.colors);\r\n        var tabRefs = Object.values(this.state.tabCasesRefs);\r\n        var caseNumbers = Object.values(this.state.caseNumbers);\r\n\r\n        for(var i=0; i < colors.length; i++){\r\n            var html = `\r\n                <div style=\"color:${colors[i]}\" >\r\n                    ${this.setCommas(caseNumbers[i])}\r\n                </div>\r\n            `;\r\n            tabRefs[i].current.innerHTML = html;\r\n        }\r\n    }\r\n\r\n    setCommas(number){\r\n        return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    placeEvents(){\r\n        this.state.tabRefs.allCasesRef.current.addEventListener('click', () => {\r\n          this.changeSelectedButton(this.state.tabRefs.allCasesRef);\r\n          this.props.caseTypeChanged('cases');\r\n        }, false);\r\n        this.state.tabRefs.activeCasesRef.current.addEventListener('click', () => {\r\n            this.changeSelectedButton(this.state.tabRefs.activeCasesRef);\r\n            this.props.caseTypeChanged('active');\r\n         }, false);\r\n         this.state.tabRefs.recoveredCasesRef.current.addEventListener('click', () => {\r\n            this.changeSelectedButton(this.state.tabRefs.recoveredCasesRef);\r\n            this.props.caseTypeChanged('recovered');\r\n         }, false);\r\n         this.state.tabRefs.deathsCasesRef.current.addEventListener('click', () => {\r\n            this.changeSelectedButton(this.state.tabRefs.deathsCasesRef);\r\n            this.props.caseTypeChanged('deaths');\r\n         }, false);\r\n    }\r\n\r\n    changeSelectedButton(buttonElement){\r\n        var cardList = Object.values(this.state.tabRefs);\r\n        cardList.forEach((cardElement) => {\r\n            cardElement.current.style.backgroundColor = \"#EFF2F6\";\r\n        });\r\n        buttonElement.current.style.backgroundColor = \"lightgrey\";\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row stats-container\">\r\n                <div className=\"col\">\r\n                    <div className=\"card\" ref={this.state.tabRefs.allCasesRef}>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">Total Cases</h5>\r\n                            <h6 className=\"card-subtitle mb-2 text-muted\" ref={this.state.tabCasesRefs.allCasesRef}></h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <div className=\"card\" ref={this.state.tabRefs.activeCasesRef}>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">Active Cases</h5>\r\n                            <h6 className=\"card-subtitle mb-2 text-muted\" ref={this.state.tabCasesRefs.activeCasesRef}></h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <div className=\"card\" ref={this.state.tabRefs.recoveredCasesRef}>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">Recovered</h5>\r\n                            <h6 className=\"card-subtitle mb-2 text-muted \" ref={this.state.tabCasesRefs.recoveredCasesRef}></h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <div className=\"card\" ref={this.state.tabRefs.deathsCasesRef}>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">Deaths</h5>\r\n                            <h6 className=\"card-subtitle mb-2 text-muted \" ref={this.state.tabCasesRefs.deathsCasesRef}></h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tab;\r\n","var mapStyle = [\r\n  {\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#f5f5f5\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.icon\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#616161\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#f5f5f5\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.land_parcel\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#bdbdbd\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#eeeeee\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#757575\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi.park\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#e5e5e5\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi.park\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#9e9e9e\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#ffffff\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.arterial\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#757575\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#dadada\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#616161\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#9e9e9e\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit.line\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#e5e5e5\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit.station\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#eeeeee\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#c9c9c9\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#9e9e9e\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport default mapStyle;","import { Circle, InfoWindow } from \"@react-google-maps/api\";\r\nimport React, {Component} from 'react';\r\n\r\nclass CircleComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    \r\n        this.state = {\r\n            isOpen: false,\r\n            minCircleSize: 0,\r\n            maxCircleSize: 3000000\r\n        }\r\n    \r\n    }\r\n    \r\n    handleToggleOpen = () => {\r\n    \r\n        this.setState({\r\n            isOpen: true\r\n        });\r\n    }\r\n    \r\n    handleToggleClose = () => {\r\n        this.setState({\r\n            isOpen: false\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n            <Circle\r\n                options={{\r\n                    fillColor:this.props.values.color, \r\n                    strokeColor:this.props.values.color, \r\n                    fillOpacity: 0.35, \r\n                    strokeWeight:2, \r\n                    strokeOpacity: 0.8\r\n                    \r\n                }}\r\n                \r\n                center={this.props.countryCenter}\r\n                radius={Math.min(Math.max(this.props.values.cases, this.state.minCircleSize), this.state.maxCircleSize)}\r\n                onMouseOver={() => this.handleToggleOpen()}\r\n                onMouseOut={() => this.handleToggleClose()}\r\n            >\r\n    \r\n            </Circle>\r\n            {\r\n                this.state.isOpen &&\r\n                <InfoWindow position={this.props.countryCenter}   onCloseClick={() => this.setState({isOpen: false})}>\r\n                        <div className=\"info-container\">\r\n                            <div className=\"info-flag\" style={{backgroundImage:  \"url(\" + this.props.country.countryInfo.flag + \")\"}}>\r\n                            </div>\r\n                            <div className=\"info-name\">\r\n                                {this.props.country.country}\r\n                            </div>\r\n                            <div className=\"info-confirmed\">\r\n                                Total: {this.props.country.cases}\r\n                            </div>\r\n                            <div className=\"info-recovered\">\r\n                                Recovered: {this.props.country.recovered}\r\n                            </div>\r\n                            <div className=\"info-deaths\">\r\n                                Deaths: {this.props.country.deaths}\r\n                            </div>\r\n                        </div>\r\n                                    \r\n                </InfoWindow>\r\n            }\r\n             \r\n             </div>\r\n             \r\n        );\r\n    }\r\n}\r\n\r\nexport default CircleComponent;","import 'numeral';\r\nimport React, {Component, useState, useEffect} from 'react';\r\nimport mapStyle from '../styles/map-style';\r\nimport '../styles/new-style.css';\r\nimport { GoogleMap, LoadScript, Circle, InfoWindow } from '@react-google-maps/api';\r\nimport CircleComponent from './CircleComponent';\r\n\r\n\r\nclass Map extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            colors: {\r\n                    cases: '#1d2c4d',\r\n                    active : '#FF0000',\r\n                    recovered: '#25b840',\r\n                    deaths: '#020d1f'\r\n            },\r\n            mapstate: {\r\n                data: this.props.countryData,\r\n                caseType: 'cases', \r\n                map: null,\r\n                center: {lat: 39.8283, lng: -98.5795}\r\n            }\r\n        }\r\n        this.circles = []\r\n        this.googleMap = React.createRef();\r\n    }\r\n\r\n    changeSelectedCaseType(caseType){\r\n        this.setState({mapstate: { data: this.props.countryData, caseType: caseType }});\r\n    }     \r\n\r\n    setMapCenter(lat, long){\r\n      \r\n        this.setState({mapstate : { center: {lat: lat, lng: long}, caseType: this.state.mapstate.caseType}});\r\n    }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div class=\"row map-container mt-3\">\r\n                <div class=\"col\" >\r\n                    <div class=\"col\">\r\n                        <LoadScript\r\n                            googleMapsApiKey=\"AIzaSyB83A6z6v1LdZgGVLUk47Kpu8j4DrzgqYU\"\r\n                        >\r\n                            <GoogleMap ref={this.googleMap}\r\n                                mapContainerStyle={ {\r\n                                    width: '100%',\r\n                                    height: '70vh',\r\n                                    boxShadow: '0 0 15px -4px rgba(0,0,0, 0.5)',\r\n                                    borderRadius: '12px'\r\n                                    }}\r\n                                center={this.state.mapstate.center}\r\n                                zoom={3}\r\n                                \r\n                                onLoad={map => {\r\n                                    map.setOptions({styles: mapStyle});\r\n                                    this.props.countryData.map((country)=>{\r\n                                       \r\n                                    \r\n                                    let countryCenter = {\r\n                                        lat: country.countryInfo.lat,\r\n                                        lng: country.countryInfo.long\r\n                                    }\r\n                                \r\n                                    var values = {\r\n                                        color: this.state.colors[this.state.mapstate.caseType],\r\n                                        cases: country[this.state.mapstate.caseType]\r\n                                    }\r\n\r\n                                    return (\r\n                                        <CircleComponent countryCenter={countryCenter} values={values} country={country}/>\r\n                                    );\r\n                                    });\r\n                                    \r\n                                }}\r\n                                \r\n                                \r\n                            >\r\n                                {\r\n                                     this.props.countryData.map((country)=>{\r\n                                        let countryCenter = {\r\n                                            lat: country.countryInfo.lat,\r\n                                            lng: country.countryInfo.long\r\n                                        }\r\n                                       \r\n                                        var values = {\r\n                                            color: this.state.colors[this.state.mapstate.caseType],\r\n                                            cases: country[this.state.mapstate.caseType]\r\n                                        }\r\n                            \r\n                                    return (\r\n                                        <CircleComponent key={country.country} countryCenter={countryCenter} values={values} country={country}/>\r\n                                    );\r\n                                    })\r\n                                        \r\n                                }\r\n                                <></>\r\n                            </GoogleMap>\r\n                        </LoadScript>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;","import React, { Component } from 'react';\r\nimport Chart from 'chart.js';\r\nimport numeral from 'numeral';\r\nimport '../styles/new-style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass Stats extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        \r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        var chartdata = buildChartData(this.props.historicalDataWorld);\r\n        buildChart(chartdata, this.myRef.current, 'cases');\r\n        //buildPieChart(this.props.worldData,this.pieChartRef.current );\r\n    }\r\n\r\n    changeSelectedCaseType(caseType, country){\r\n        var chartdata = null;\r\n        if(country === 'worldwide'){\r\n            chartdata = buildChartData(this.props.historicalDataWorld);\r\n        }\r\n        else{\r\n            chartdata = buildChartData(this.getCountryHistoricalData(country));\r\n            \r\n        }\r\n        \r\n        buildChart(chartdata, this.myRef.current, caseType);\r\n    }\r\n\r\n    getCountryHistoricalData(country){\r\n        var value = null;\r\n        this.props.historicalDataCountries.map(\r\n            (currentCuntry) => {\r\n                if(currentCuntry.country === country){\r\n                    \r\n                    value = currentCuntry.timeline;\r\n                }\r\n                \r\n            }\r\n        );\r\n        return value;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row chart-container mt-3\">\r\n                <div className=\"col linear-chart\">\r\n                    <canvas id=\"myChart\" ref={this.myRef}></canvas>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nvar colors = {\r\n    allCases: '#1d2c4d',\r\n    activeCases : '#FF0000',\r\n    recoveredCases: '#25b840',\r\n    deathsCases: '#020d1f'\r\n}\r\n\r\nconst buildChartData = (data) => {\r\n    let chartData ={\r\n        allCases: [],\r\n        deaths: [],\r\n        recovered: [],\r\n        active: []\r\n    }\r\n    for(let date in data.cases){\r\n        let newDataPoint = {\r\n            x: date,\r\n            y: data.cases[date]\r\n        }\r\n        chartData.allCases.push(newDataPoint);\r\n    }\r\n    for(let date in data.deaths){\r\n        let newDataPoint = {\r\n            x: date,\r\n            y: data.deaths[date]\r\n        }\r\n        chartData.deaths.push(newDataPoint);\r\n    }\r\n    for(let date in data.recovered){\r\n        let newDataPoint = {\r\n            x: date,\r\n            y: data.recovered[date]\r\n        }\r\n        chartData.recovered.push(newDataPoint);\r\n    }\r\n    for(let date in data.cases){\r\n        let newDataPoint = {\r\n            x: date,\r\n            y: data.cases[date] - data.recovered[date] - data.deaths[date]\r\n        }\r\n        chartData.active.push(newDataPoint);\r\n    }\r\n    \r\n    return chartData;\r\n}\r\n\r\nvar chart = null;\r\n\r\nconst buildChart = (chartData, chartRef, caseType) => {\r\n    \r\n    var timeFormat = 'MM/DD/YY';\r\n  \r\n    \r\n    var ctx = chartRef.getContext('2d');\r\n    \r\n    var data = {\r\n        cases: {\r\n            label: 'Total Cases',\r\n            backgroundColor: colors.allCases,\r\n            borderColor: colors.allCases,\r\n            data: chartData.allCases\r\n        },\r\n        recovered: {\r\n            label: 'Recovered Cases',\r\n            backgroundColor: colors.recoveredCases,\r\n            borderColor: colors.recoveredCases,\r\n            data: chartData.recovered\r\n        }, \r\n        deaths: {\r\n            label: 'Death Cases',\r\n            backgroundColor: colors.deathsCases,\r\n            borderColor: colors.deathsCases,\r\n            data: chartData.deaths\r\n        },\r\n        active: {\r\n            label: 'Active Cases',\r\n            backgroundColor: colors.activeCases,\r\n            borderColor: colors.activeCases,\r\n            data: chartData.active\r\n        },\r\n    }\r\n\r\n    if(chart !== null)\r\n        chart.destroy();\r\n        \r\n    chart = new Chart(ctx, {\r\n        // The type of chart we want to create\r\n        type: 'line',\r\n\r\n        // The data for our dataset\r\n        data: {\r\n            datasets: [\r\n                data[caseType],\r\n            ]\r\n        },\r\n\r\n        // Configuration options go here\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            tooltips: {\r\n                mode: 'index',\r\n                intersect: false\r\n            },\r\n            elements:{\r\n                point:{\r\n                    radius: 1\r\n                }\r\n            },\r\n            scales:     {\r\n                xAxes: [{\r\n                    type: \"time\",\r\n                    time: {\r\n                        format: timeFormat,\r\n                        tooltipFormat: 'll'\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    ticks: {\r\n                        // Include a dollar sign in the ticks\r\n                        callback: function(value, index, values) {\r\n                            return numeral(value).format('0,0');\r\n                        }\r\n                    },            \r\n                }]\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nconst buildPieChart = (chartData, pieChartRef) => {\r\n    var timeFormat = 'MM/DD/YY';\r\n    var ctx = pieChartRef.getContext('2d');\r\n    var caseNumbers= [chartData.cases, chartData.active, chartData.recovered, chartData.deaths];\r\n    var myPieChart = new Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n            datasets: [{\r\n                data: [caseNumbers[1], caseNumbers[2], caseNumbers[3]],\r\n                backgroundColor: [\r\n                    colors.activeCases,\r\n                    colors.recoveredCases,\r\n                    colors.deathsCases,\r\n                ]\r\n            }],\r\n            labels: [\r\n                'Active',\r\n                'Recovered',\r\n                'Death'\r\n            ]\r\n        },\r\n        options: {\r\n            maintainAspectRatio: false,\r\n            tooltips: {\r\n                mode: 'index',\r\n                intersect: false\r\n            },\r\n        },\r\n       \r\n    });\r\n}\r\n\r\nexport default Stats;","import React, {Component} from 'react';\r\n\r\n\r\nclass ListTable extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.countryTableRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.showDataInTable(this.props.countryData,this.countryTableRef.current);\r\n    }\r\n\r\n    showDataInTable = (data, countryTableRef) => {\r\n        var html = '';\r\n        data.forEach((country)=>{\r\n            html += `\r\n            <tr>\r\n                <td>${country.country}</td>\r\n                <td>${country.cases}</td>\r\n                <td>${country.recovered}</td>\r\n                <td>${country.deaths}</td>\r\n            </tr>\r\n            `\r\n        })\r\n        countryTableRef.innerHTML = html;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\" countries-container mt-3 my-custom-scrollbar table-wrapper-scroll-y\">\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Country</th>\r\n                            <th scope=\"col\">Cases</th>\r\n                            <th scope=\"col\">Recovered</th>\r\n                            <th scope=\"col\">Death</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody id=\"countries-table-body\" ref={this.countryTableRef}>\r\n                        <tr>\r\n                            <th>Germany</th>\r\n                            <td>19200</td>\r\n                            <td>8000</td>\r\n                            <td>180000</td>\r\n                            <td>8000</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ListTable;","import React, { Component } from 'react';\r\nimport Header from './HeaderComponent';\r\nimport Tab from './TabComponent';\r\nimport '../styles/new-style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'numeral';\r\nimport 'moment';\r\nimport 'chart.js';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport Map from './MapComponent';\r\nimport Stats from './StatsComponent';\r\nimport ListTable from './ListTableComponent';\r\n\r\nclass Main extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            worldData: null,\r\n            countryData: null,\r\n            historicalData: null,\r\n            historicalDataCountries: null, \r\n            selectedCountry: 'worldwide',\r\n            caseType: 'cases'\r\n        }\r\n        this.mapComponent = React.createRef();\r\n        this.statsComponent = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n       this.loadWorldData();\r\n       this.loadCountryData();\r\n       this.loadHistoricalDataWorld();\r\n       this.loadHistoricalDataCountries();\r\n    }\r\n\r\n    loadWorldData(){\r\n        fetch(\"https://disease.sh/v3/covid-19/all\")\r\n        .then((response) => {\r\n            return response.json()\r\n        }).then((data) => {\r\n            this.setState({ worldData: data, isLoading: true });\r\n        });\r\n    }\r\n\r\n    loadCountryData(){\r\n        fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response)=>{\r\n            return response.json()\r\n        }).then((data)=>{\r\n            this.setState({countryData: data, isLoading: true});\r\n        });\r\n    }\r\n\r\n    loadHistoricalDataWorld(){\r\n        fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response)=>{\r\n                return response.json();\r\n            }).then((data)=>{\r\n                this.setState({historicalDataWorld: data, isLoading: true});\r\n            });\r\n    }\r\n\r\n    loadHistoricalDataCountries(){\r\n        fetch(\"https://disease.sh/v3/covid-19/historical?lastdays=120\")\r\n            .then((response)=>{\r\n                return response.json();\r\n            }).then((data)=>{\r\n                this.setState({historicalDataCountries: data, isLoading: false});\r\n            });\r\n    }\r\n\r\n    caseTypeChanged(caseType){\r\n   \r\n        this.mapComponent.current.changeSelectedCaseType(caseType);\r\n        this.statsComponent.current.changeSelectedCaseType(caseType, this.state.selectedCountry);\r\n        this.setState({caseType: caseType});\r\n    }\r\n\r\n    selectedCountryChanged(selectedCountry){\r\n        this.mapComponent.current.setMapCenter(selectedCountry.lat, selectedCountry.long);\r\n        this.statsComponent.current.changeSelectedCaseType(this.state.caseType, selectedCountry.country);\r\n        this.setState({selectedCountry: selectedCountry.country});\r\n    }\r\n\r\n    render(){\r\n \r\n    if (this.state.isLoading) {\r\n      return <p>Loading ...</p>;\r\n    }\r\n\r\n        return (\r\n            <div className=\"container-fluid main\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-8\">\r\n                        <Header countryData={this.state.countryData} selectedCountryChanged={(selectedCountry) => this.selectedCountryChanged(selectedCountry)}/>\r\n                        <Tab worldData={this.state.worldData} caseTypeChanged={(caseType) => this.caseTypeChanged(caseType)}/>\r\n                        <Map countryData={this.state.countryData} ref={this.mapComponent}/>           \r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <ListTable countryData={this.state.countryData}/>\r\n                        <Stats  historicalDataCountries={this.state.historicalDataCountries}\r\n                                historicalDataWorld={this.state.historicalDataWorld}\r\n                                worldData={this.state.worldData}\r\n                                ref={this.statsComponent}/>  \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/MainComponent'\n\nfunction App() {\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}